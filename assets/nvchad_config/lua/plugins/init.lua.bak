-- NvChad uses "Lazy" to manage the plugins
-- This file returns the configurtaion list for Lazy

local map = vim.keymap.set

return {
  {
    "stevearc/conform.nvim",
    -- event = 'BufWritePre', -- uncomment for format on save
    opts = require "configs.conform",
  },

  -- These are some examples, uncomment them if you want to see them work!
  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
  },

  {
    "hrsh7th/nvim-cmp",
    event = "InsertEnter",
    dependencies = {
      { "hrsh7th/cmp-nvim-lsp" },
      { "hrsh7th/cmp-vsnip" },
      { "hrsh7th/vim-vsnip" }
    },
    opts = function()
      local cmp = require("cmp")
      local conf = {
        sources = {
          { name = "nvim_lsp" },
          { name = "vsnip" },
        },
        snippet = {
          expand = function(args)
            -- Comes from vsnip
            fn["vsnip#anonymous"](args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          -- None of this made sense to me when first looking into this since there
          -- is no vim docs, but you can't have select = true here _unless_ you are
          -- also using the snippet stuff. So keep in mind that if you remove
          -- snippets you need to remove this select
          ["<CR>"] = cmp.mapping.confirm({ select = true })
        })
      }
      return conf
    end
  },




  {
    "scalameta/nvim-metals",
    dependencies = {
      "nvim-lua/plenary.nvim",
      {
        "j-hui/fidget.nvim",
        opts = {},
      },
    },





    ft = { "scala", "sbt", "java" },
    opts = function()
      local metals_config = require("metals").bare_config()

      -- Example of settings
      metals_config.settings = {
        showImplicitArguments = true,
        excludedPackages = { "akka.actor.typed.javadsl", "com.github.swagger.akka.javadsl" },
      }

      -- *READ THIS*
      -- I *highly* recommend setting statusBarProvider to either "off" or "on"
      --
      -- "off" will enable LSP progress notifications by Metals and you'll need
      -- to ensure you have a plugin like fidget.nvim installed to handle them.
      --
      -- "on" will enable the custom Metals status extension and you *have* to have
      -- a have settings to capture this in your statusline or else you'll not see
      -- any messages from metals. There is more info in the help docs about this
      metals_config.init_options.statusBarProvider = "off"

      -- Example if you are using cmp how to make sure the correct capabilities for snippets are set
      metals_config.capabilities = require("cmp_nvim_lsp").default_capabilities()

      metals_config.on_attach = function(client, bufnr)
        -- require("metals").setup_dap()

        -- LSP mappings
        map("n", "<leader>gD", vim.lsp.buf.definition, { desc = "LSP Go to definition" })
        map("n", "K", vim.lsp.buf.hover, { desc = "LSP Hover" })
        map("n", "<leader>gi", vim.lsp.buf.implementation, { desc = "LSP Go to implementation" })
        map("n", "<leader>gr", vim.lsp.buf.references, { desc = "LSP Go to references" })
        map("n", "<leader>gds", vim.lsp.buf.document_symbol, { desc = "LSP Symbols in document" })
        map("n", "<leader>gws", vim.lsp.buf.workspace_symbol, { desc = "LSP Symbols in workspace" })
        map("n", "<leader>cl", vim.lsp.codelens.run, { desc = "LSP Run codelens" })
        map("n", "<leader>sh", vim.lsp.buf.signature_help, { desc = "LSP Signature help" })
        map("n", "<leader>rn", vim.lsp.buf.rename, { desc = "LSP Rename" })
        map("n", "<leader>f", vim.lsp.buf.format, { desc = "LSP Format" })
        map("n", "<leader>ca", vim.lsp.buf.code_action, {desc = "LSP Code action" })

        map("n", "<leader>ws", function()
          require("metals").hover_worksheet()
        end)

        -- all workspace diagnostics
        map("n", "<leader>aa", vim.diagnostic.setqflist, { desc = "All workspace diagnostics" })

        -- all workspace errors
        map("n", "<leader>ae", function()
          vim.diagnostic.setqflist({ severity = "E" })
        end, { desc = "All workspace errors" })

        -- all workspace warnings
        map("n", "<leader>aw", function()
          vim.diagnostic.setqflist({ severity = "W" })
        end, { desc = "All workspace warnings" })

        -- buffer diagnostics only
        map("n", "<leader>d", vim.diagnostic.setloclist, { desc = "Buffer diagnostics only" })

        map("n", "[c", function()
          vim.diagnostic.goto_prev({ wrap = false })
        end, { desc = "Previous diagnostic" })

        map("n", "]c", function()
          vim.diagnostic.goto_next({ wrap = false })
        end, { desc = "Next diagnostic" })
      end

      return metals_config
    end,
    config = function(self, metals_config)
      local nvim_metals_group = vim.api.nvim_create_augroup("nvim-metals", { clear = true })
      vim.api.nvim_create_autocmd("FileType", {
        pattern = self.ft,
        callback = function()
          require("metals").initialize_or_attach(metals_config)
        end,
        group = nvim_metals_group,
      })
    end

  },

  -- {
  -- 	"nvim-treesitter/nvim-treesitter",
  -- 	opts = {
  -- 		ensure_installed = {
  -- 			"vim", "lua", "vimdoc",
  --      "html", "css"
  -- 		},
  -- 	},
  -- },
}
